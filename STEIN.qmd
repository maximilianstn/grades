---
title: "Stein"
author: "Maximilian Stein"
date: "`r Sys.Date()`"
format:
  html: default
  pdf:
    documentclass: article
    keep-tex: true
execute:
  echo: true
  warning: false
  message: false
---

# 1. Introduction 

This document contains solutions for the exam, making use of the `dplyr`, `tidyr` and `stringr` libraries.

```{r setup, include=FALSE}
library(dplyr)
library(tidyr)
library(stringr)
library(here)
library(ggplot2)
```

## Question 1

Load the data.

```{r}
grades_data <- read.csv(here("grades.csv"))
```

# 2. Simple Analysis 

## Question 2

Give the number of grades in the data set directly in the text of your quarto file, in a sentence of the form “The data set contains xxx grades.” where xxx is replaced by the number of grades. This must be computed from the data set.

```{r}
cat("The data set contains", nrow(grades_data), "grades.")
```

## Question 3 

Use distinct() compute the number of students on the data set and report the value directly in the text as in the previous question.

```{r}
num_students <- grades_data %>%
  distinct(id) %>%
  nrow()

cat("There are", num_students, "students in the data set.")
```

## Question 4

Create a students data frame that contains one row per student and two variables, id and group that gives the assignment of each student to their group. Make sure that each student appears on only once in the data frame. Include a short extract of the data frame in the quarto rendering.

```{r}
# 'students' data frame with one row per student
students <- grades_data %>%
  distinct(id, group)

# short extract of the 'students' data frame
students %>%
  slice_head(n = 5) %>%
  knitr::kable()
```

## Question 5 

Use a graphical representation to display the number of students per group.

```{r}
students %>%
  count(group) %>%
  ggplot(aes(x = group, y = n, fill = group)) +
  geom_col(fill = "darkblue") +
  labs(title = "Number of Students per Group", x = "Group", y = "Number of Students") +
  theme_minimal()
```

## Question 6 

Compute the average of all the grades in Hunting and Gathering Skills in each group and display graphically this average as a function of the group. It is recommend to use geom_col() for this task.

```{r}
avg_grades <- grades_data %>%
  filter(course == "Hunting and Gathering Skills") %>%
  group_by(group) %>%
  summarise(avg_grade = mean(grade, na.rm = TRUE))

# Plotting of average grades
ggplot(avg_grades, aes(x = group, y = avg_grade, fill = group)) +
  geom_col(fill = "darkblue") +
  labs(title = "Average Grades in Hunting and Gathering Skills by Group",
       x = "Group",
       y = "Average Grade") +
  theme_minimal() 
```

## Question 7 

Compare graphically the distribution of the grades of the 3 modules.

### First Visualisation Option - Boxplot Distribution
```{r}
ggplot(grades_data, aes(x = factor(module), y = grade)) +
  geom_boxplot(fill = "lightblue") +
  labs(
    title = "Distribution of Grades by Module",
    x = "Module",
    y = "Grade"
  ) +
  theme_minimal()
```

### Second Visualisation Option - Density Distribution
```{r}
ggplot(grades_data, aes(x = grade, fill = factor(module))) +
  geom_density(alpha = 0.5) +
  labs(
    title = "Density Distribution of Grades by Module",
    x = "Grade",
    y = "Density",
    fill = "Module"
  ) +
  theme_minimal()
```
# 3. Attendance Analysis

## Question 8

Compute the number of grades per student and include in your quarto rendering an extract of the resulting data frame. Make sure to keep in the data frame the id of the students but also their group. Include in the text a markdown table with the minimum, maximum, average and median number of grades per student.

```{r}
grades_per_student <- grades_data %>%
  group_by(id, group) %>%
  summarise(num_grades = n(), .groups = 'drop')

# Extract of the resulting data frame
grades_per_student %>%
  slice_head(n = 5) %>%
  knitr::kable()

# Summary statistics
grades_summary <- grades_per_student %>%
  summarise(
    Minimum = min(num_grades),
    Maximum = max(num_grades),
    Average = mean(num_grades),
    Median = median(num_grades)
  )

# Mrkdown Table
grades_summary %>%
  knitr::kable()
```

## Question 9 

Create a data frame that gives for each student their id, their group and the number of grades they obtained in Martial Arts and Self-Defense and include in the quarto rendering a small extract of the result.

```{r}
martial_arts_grades <- grades_data %>%
  filter(course == "Martial Arts and Self-Defense") %>%
  group_by(id, group) %>%
  summarise(num_grades = n(), .groups = 'drop', course)

martial_arts_grades %>%
  slice_head(n = 5) %>%
  knitr::kable()
```


## Question 10

Compute from the previous data frame the distribution of the number of grades, that is for each number of grades (e.g. 10) the number of students who have exactly this number of grades in Martial Arts and Self-Defense. Represent graphically the results.


```{r}
grade_distribution <- martial_arts_grades %>%
  count(num_grades)

grade_distribution %>%
  knitr::kable()

ggplot(grade_distribution, aes(x = factor(num_grades), y = n)) +
  geom_col(fill = "skyblue") +
  labs(
    title = "Distribution of Number of Grades in Martial Arts and Self-Defense",
    x = "Number of Grades",
    y = "Number of Students"
  ) +
  theme_minimal()
```
## Question 11

Using a graphical representation to study whether the number of grades per student in Martial Arts and Self-Defense depends on the group.

```{r}
martial_arts_grades <- grades_data %>%
  filter(course == "Martial Arts and Self-Defense") %>%
  group_by(id, group) %>%
  summarise(num_grades = n(), .groups = 'drop')

ggplot(martial_arts_grades, aes(x = "", y = num_grades)) +
  geom_violin(trim = FALSE, fill = "skyblue", alpha = 0.7) +
  labs(
    title = "Distribution of Number of Grades per Student in Martial Arts and Self-Defense by Group",
    x = "Number of Grades per Student",
    y = "Density"
  ) +
  theme_minimal() +
  facet_wrap(~ group, ncol = 4) +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
```


# 4. Grade Analysis

## Question 12

Create a data frame that gives for each student their id, their group and the average of grades they obtained in each course. Using an adapted pivoting method, create a new data frame with one row per student and 12 columns: one for the id, one for the group and one per course. Include in the quarto rendering a small extract of the data frame with the id and group columns and with two of the course columns. 

```{r}
# average grade per student per course
student_course_avg <- grades_data %>%
  group_by(id, group, course) %>%
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = 'drop')

# one row per student and columns for each course
student_avg_grades <- student_course_avg %>%
  pivot_wider(names_from = course, values_from = avg_grade)

# small extract of the data frame with id, group, and two course columns
student_avg_grades %>%
  select(id, group, `Hunting and Gathering Skills`, `Martial Arts and Self-Defense`) %>%
  slice_head(n = 5) %>%
  knitr::kable()
```

## Question 13

Show the average grades in Herbalism and Traditional Medicine as a function of the average grades in Animal Lore and Totemism. Make sure to maximise the readability of the proposed representation.

```{r}
avg_grades_courses <- grades_data %>%
  filter(course %in% c("Herbalism and Traditional Medicine", "Animal Lore and Totemism")) %>%
  group_by(id) %>%
  summarise(
    avg_grade_herbalism = mean(grade[course == "Herbalism and Traditional Medicine"], na.rm = TRUE),
    avg_grade_animal_lore = mean(grade[course == "Animal Lore and Totemism"], na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  drop_na()

# average grades in Herbalism and Traditional Medicine vs. Animal Lore and Totemism
ggplot(avg_grades_courses, aes(x = avg_grade_animal_lore, y = avg_grade_herbalism)) +
  geom_point(color = "darkblue", alpha = 0.7) +
  geom_smooth(method = "lm", se = TRUE, color = "red", linetype = "dashed") +
  labs(
    title = "Average Grades: Herbalism and Traditional Medicine vs. Animal Lore and Totemism",
    x = "Average Grade in Animal Lore and Totemism",
    y = "Average Grade in Herbalism and Traditional Medicine"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text = element_text(color = "black"),
    axis.title = element_text(face = "bold")
  )
```
## Question 14

The cor() function computes the correlation coeﬀicient between two vectors. It can be used as a summary function in dplyr. Using it, compute the correlation between the average grades in Tribal Law and Customs and the average grades in Shamanism and Spirit Communication group by group.

```{r}
# average grades per student for the two courses
avg_grades_courses <- grades_data %>%
  filter(course %in% c("Tribal Law and Customs", "Shamanism and Spirit Communication")) %>%
  group_by(id, group, course) %>%
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = 'drop')

# average grades in both courses
avg_grades_wide <- avg_grades_courses %>%
  pivot_wider(
    names_from = course,
    values_from = avg_grade
  )

# correlation between the average grades in the two courses, grouped by group
correlations <- avg_grades_wide %>%
  group_by(group) %>%
  summarise(
    correlation = cor(`Tribal Law and Customs`, `Shamanism and Spirit Communication`, use = "complete.obs")
  )

# Displayed computation
correlations %>%
  knitr::kable(
    caption = "Correlation between average grades in Tribal Law and Customs and Shamanism and Spirit Communication by Group"
  )
```


